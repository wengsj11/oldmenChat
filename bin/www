#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('mychat:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000'); 

app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
//-------------begin------------
// 通过 http握手使用 socket.io
const io = require('socket.io')(server);
// 储存聊天室的用户
const userList = [];

io.on('connection', socket => {
  //监听用户登录
  socket.on('login', data => {
    // console.log('用户'+socket.id+'登录'); //每一个客户端的id
    // 用户信息
    const user = {
      id:socket.id,
      username:data
    }
    userList.push(user);
    //在线人数
    const num = userList.length;
    // 向客户端发送数据
    io.sockets.emit('userEnter', { username: data, num })
    // 向登录的用户发送数据
    socket.emit('userList', { userList });
  })
  
  //监听用户发言
  socket.on('postMsg', data => {
    // console.dir(data);
    //向其他用户广播消息
    // socket.broadcast.emit('broadcast message', data); //全局广播消息（不包含自己）
    io.sockets.emit('broadcastMessage',data) //全局广播消息（包括自己）
  })
  //监听用户登出事件
  socket.on('disconnect', data => {
    console.log('==============>:用户' + data + '离开');
    userList.find(function (user, index, arr) {
      if (user.id === socket.id) {
        userList.splice(index, 1);
        // 广播下线信息
        io.sockets.emit('userLeave', { username: user.username, num: userList.length });
        return true;
      }
      return false;
    })
  })
})
//--------------end--------------

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
